plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.palantir.docker" version "0.22.1"
	id 'jacoco'
}

group = 'cl.nisum'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
	println "Docker Result -> user-challenge-app:latest"
	name "user-challenge-app:latest"
	tag "User-App", "user-challenge-app:latest"
	dockerfile file("docker/Dockerfile")
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'ma.glasnost.orika:orika-core:1.5.1'
	implementation 'commons-beanutils:commons-beanutils:1.9.4'
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-core:5.0.0'
	testCompileOnly 'junit:junit:4.12'
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.1'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

jacoco {
	toolVersion = "0.8.8"
	reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
		html.destination file("$buildDir/jacoco")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
				exclude: ['**/utils/**',
					'**/dto/**',
					'**/vo/**',
					'**/security/**'
				]
			)
		}))
	}
	dependsOn test
}

test {
	finalizedBy jacocoTestReport
}

tasks.named('test') {
	useJUnitPlatform()
}
